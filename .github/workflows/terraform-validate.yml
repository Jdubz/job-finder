name: Terraform Validation

on:
  pull_request:
    branches:
      - staging
      - main
    paths:
      - 'infrastructure/terraform/**'
      - '.github/workflows/terraform-validate.yml'
  push:
    branches:
      - staging
      - main
    paths:
      - 'infrastructure/terraform/**'
  workflow_dispatch:

env:
  TF_VERSION: '1.5.0'
  WORKING_DIR: infrastructure/terraform

jobs:
  terraform-format:
    name: Terraform Format Check
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIR }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Format Check
        id: fmt
        run: terraform fmt -check -recursive
        continue-on-error: true

      - name: Format Check Results
        if: steps.fmt.outcome == 'failure'
        run: |
          echo "❌ Terraform files are not properly formatted"
          echo "Run 'terraform fmt -recursive' to fix formatting"
          exit 1

      - name: Format Check Success
        if: steps.fmt.outcome == 'success'
        run: echo "✅ All Terraform files are properly formatted"

  terraform-validate:
    name: Terraform Validate
    runs-on: ubuntu-latest
    needs: terraform-format
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIR }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        id: init
        run: terraform init -backend=false

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Validation Results
        run: |
          echo "## Terraform Validation Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Format Check**: ✅ Passed" >> $GITHUB_STEP_SUMMARY
          echo "- **Initialization**: ✅ Passed" >> $GITHUB_STEP_SUMMARY
          echo "- **Validation**: ✅ Passed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "All Terraform configuration is valid!" >> $GITHUB_STEP_SUMMARY

  terraform-security-scan:
    name: Terraform Security Scan
    runs-on: ubuntu-latest
    needs: terraform-validate
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIR }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Checkov
        id: checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: ${{ env.WORKING_DIR }}
          framework: terraform
          output_format: cli
          soft_fail: true
          quiet: false

      - name: Security Scan Summary
        if: always()
        run: |
          echo "## Security Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Security scan completed. Review any findings above." >> $GITHUB_STEP_SUMMARY

  terraform-plan:
    name: Terraform Plan (Dry Run)
    runs-on: ubuntu-latest
    needs: terraform-validate
    if: github.event_name == 'pull_request'
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIR }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Create dummy tfvars
        run: |
          cat > terraform.tfvars << EOF
          firebase_project_id = "static-sites-257923"
          cloudflare_zone_id = "dummy-zone-id-for-validation"
          github_actions_service_account_email = "firebase-adminsdk-xxxxx@static-sites-257923.iam.gserviceaccount.com"
          EOF

      - name: Terraform Init
        run: terraform init -backend=false

      - name: Terraform Plan (No Apply)
        id: plan
        run: terraform plan -no-color -input=false
        continue-on-error: true

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const output = `
            ## Terraform Validation Results

            #### Format Check 🎨 \`${{ needs.terraform-format.result }}\`
            #### Validation 🤖 \`${{ needs.terraform-validate.result }}\`
            #### Plan 📖 \`${{ steps.plan.outcome }}\`

            <details>
            <summary>Show Plan</summary>

            \`\`\`terraform
            ${{ steps.plan.outputs.stdout }}
            \`\`\`

            </details>

            **Note**: This is a dry-run plan with dummy credentials. Actual deployment requires proper credentials and manual approval.

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

  summary:
    name: Validation Summary
    runs-on: ubuntu-latest
    needs: [terraform-format, terraform-validate, terraform-security-scan]
    if: always()

    steps:
      - name: Check Results
        run: |
          echo "## Terraform Validation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Format | ${{ needs.terraform-format.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Validate | ${{ needs.terraform-validate.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security | ${{ needs.terraform-security-scan.result == 'success' && '✅' || '⚠️' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.terraform-format.result }}" != "success" ]] || [[ "${{ needs.terraform-validate.result }}" != "success" ]]; then
            echo "❌ Terraform validation failed. Please fix the errors above." >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "✅ All Terraform validation checks passed!" >> $GITHUB_STEP_SUMMARY
          fi
